// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/webook-project-go/webook-feed/grpc"
	"github.com/webook-project-go/webook-feed/ioc"
	"github.com/webook-project-go/webook-feed/repository"
	"github.com/webook-project-go/webook-feed/repository/cache"
	"github.com/webook-project-go/webook-feed/repository/dao"
	"github.com/webook-project-go/webook-feed/service"
)

// Injectors from wire.go:

func InitApp() *App {
	logger := ioc.InitLogger()
	cmdable := ioc.InitRedis()
	cacheCache := cache.NewCache(cmdable)
	db := ioc.InitDatabase()
	daoDao := dao.NewDao(db)
	repositoryRepository := repository.NewRepository(cacheCache, daoDao)
	client := ioc.InitEtcd()
	builder := ioc.InitResolver(client)
	relationClient := ioc.InitRelation(builder, cacheCache)
	activeClient := ioc.InitActive(builder)
	serviceService := service.NewService(logger, repositoryRepository, relationClient, activeClient)
	grpcService := grpc.NewService(serviceService)
	grpcxServer := ioc.InitGrpcServer(client)
	saramaClient := ioc.InitKafka()
	v := ioc.InitConsumer(saramaClient, logger, serviceService)
	app := &App{
		Service:  grpcService,
		Server:   grpcxServer,
		Consumer: v,
	}
	return app
}

// wire.go:

var thirdPartyProvider = wire.NewSet(ioc.InitDatabase, ioc.InitRedis, ioc.InitKafka, ioc.InitLogger, ioc.InitConsumer, ioc.InitEtcd, ioc.InitActive, ioc.InitRelation, ioc.InitGrpcServer, ioc.InitResolver)

var feedServiceSet = wire.NewSet(service.NewService, repository.NewRepository, cache.NewCache, dao.NewDao)
